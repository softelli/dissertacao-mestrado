<?xml version="1.0"?>


<robot>

  <!-- properties (constants) -->
  <property name="ns" value="p3dx" />

  <!-- ros_control plugin -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/${ns}</robotNamespace>
    </plugin>
  </gazebo>

  <!-- base_link -->
	<gazebo reference="base_link">
		<material>Gazebo/Red</material>
	</gazebo>

  <!-- top_plate -->
  <gazebo reference="top_plate">
    <material>Gazebo/Black</material>
  </gazebo>
  
  <!-- swivel -->
  <gazebo reference="swivel">
    <material>Gazebo/Grey</material>
  </gazebo>
  
  <!-- center_hubcap -->
	<gazebo reference="center_hubcap">
		<material>Gazebo/Grey</material>
	</gazebo>
  
  <!-- center_wheel -->
	<gazebo reference="center_wheel">
		<material>Gazebo/Black</material>
		<mu1>10.0</mu1>
		<mu2>10.0</mu2>
		<kp>1000000.0</kp>
		<kd>1.0</kd>
	</gazebo>
  
  <!-- front_sonar -->  
  <gazebo reference="front_sonar">
    <material value="Gazebo/Yellow" />
  </gazebo>
  

  <!-- differential drive -->
	<gazebo>
		<plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
			<alwaysOn>true</alwaysOn>
			<updateRate>100</updateRate><!-- original = 100 -->
			<leftJoint>base_right_wheel_joint</leftJoint>
			<rightJoint>base_left_wheel_joint</rightJoint>
			<wheelSeparation>0.39</wheelSeparation>
			<wheelDiameter>0.15</wheelDiameter>
			<torque>5</torque>

			<!-- <commandTopic>${ns}/cmd_vel</commandTopic> -->
			<!-- <odometryTopic>${ns}/odom</odometryTopic>  -->

			<commandTopic>cmd_vel</commandTopic>
			<odometryTopic>odom</odometryTopic>			
			
			<odometryFrame>odom</odometryFrame>
			<robotBaseFrame>base_link</robotBaseFrame>
		</plugin>
	</gazebo>

  <!-- ground truth -->
	<gazebo>
		<plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
			<alwaysOn>true</alwaysOn>
			<updateRate>100.0</updateRate>
			<bodyName>base_link</bodyName>
			<topicName>${ns}/base_pose_ground_truth</topicName>
			<gaussianNoise>0.01</gaussianNoise>
			<frameName>map</frameName>
			<!-- initialize odometry for fake localization -->
			<xyzOffsets>0 0 0</xyzOffsets>
			<rpyOffsets>0 0 0</rpyOffsets>
		</plugin>
	</gazebo>
	
	<!-- lms100 -->
	<gazebo reference="lms100">
		<sensor type="ray" name="head_hokuyo_sensor">
			<pose>0 0 0 0 0 0</pose>
			<visualize>true</visualize>
			<update_rate>50</update_rate> <!-- estava 50 -->
			<ray>
				<scan>
					<horizontal>
						<samples>270</samples> <!-- quantidade de indices de ranges[] original 270-->
						<resolution>1</resolution>
						<min_angle>-2.35619449615 </min_angle>
						<max_angle>2.35619449615 </max_angle>
					</horizontal>
				</scan>
				<range>
					<min>0.25</min> <!-- 0.10 - o big_led tem raio de 0.15-->
					<max>3.00</max> <!-- original 3.00 -->
					<resolution>0.05</resolution> <!-- 0.1 -->
				</range>
				<noise>
					<type>gaussian</type>
					<!-- Noise parameters based on published spec for Hokuyo laser achieving 
						"+-30mm" accuracy at range < 10m. A mean of 0.0m and stddev of 0.01m will 
						put 99.7% of samples within 0.03m of the true reading. -->
					<mean>0.0</mean>
					<stddev>0.01</stddev>
				</noise>
			</ray>
			<plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
				<topicName>${ns}/laser/scan</topicName>
				<frameName>lms100</frameName>
			</plugin>
		</sensor>
	 </gazebo>	 
         	 
	 <!-- light_sensor -->
	 
	 <gazebo reference="light_sensor_link">
	      <material value="Gazebo/Gray" />
	      <sensor name='camera' type='camera'>
		<camera name='__default__'>
		  <horizontal_fov>1.047</horizontal_fov> <!-- original 1.047 -->
		  <image>
		      <width>32</width><!-- original testado eh 320 -->
		      <height>24</height><!-- original testado eh 240 -->
		      <!-- <format>R8G8B8</format> deixar vazio, pois eh o pardrao -->
		  </image>
		  <clip>
		      <near>1.0</near><!-- testar 2.0m eh 0.1 -->
		      <far>100</far><!-- testar 10m testado eh 100 -->
		  </clip>
	        </camera>
	        <plugin name="light_sensor_plugin" filename="libgazebo_light_sensor_plugin.so">
		<cameraName>camera</cameraName>
		<alwaysOn>true</alwaysOn>
		<updateRate>1</updateRate>
		<imageTopicName>rgb/image_raw</imageTopicName>
		<depthImageTopicName>depth/image_raw</depthImageTopicName>
		<pointCloudTopicName>depth/points</pointCloudTopicName>
		<cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
		<depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
		<frameName>depth_optical_frame</frameName>
		<baseline>0.1</baseline>
		<distortion_k1>0.0</distortion_k1>
		<distortion_k2>0.0</distortion_k2>
		<distortion_k3>0.0</distortion_k3>
		<distortion_t1>0.0</distortion_t1>
		<distortion_t2>0.0</distortion_t2>
		<pointCloudCutoff>0.4</pointCloudCutoff>
		<robotNamespace></robotNamespace> <!-- deixar vazio para ser preenchido dinamicamente -->
	      </plugin>
	    </sensor>
	 </gazebo>
	 
	 <!-- disc -->
	 <gazebo reference="disc_link">
	  <material>Gazebo/Black</material>
	 </gazebo>
	 <!-- big_led -->
	 <gazebo reference="big_led_link">
	  <material>Gazebo/GreyTransparent</material>
	  <!-- local do plugin para colorir a led -->
	    <visual>      
	      <plugin name="big_led_control" filename="libBigLedPlugin.so">
		<robotNamespace>${ns}</robotNamespace>
	      </plugin>
	    </visual>
        </gazebo>
</robot>
