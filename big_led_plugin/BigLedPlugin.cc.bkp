#include <gazebo/common/Color.hh>
#include <gazebo/common/Events.hh>
#include <gazebo/common/Time.hh>
#include <gazebo/rendering/Visual.hh>
#include "BigLedPlugin.hh"

namespace gazebo
{
  /// \internal
  /// \class BigLegPlugin BigLegPlugin.hh
  /// \brief Private data for the BigLegPlugin class.
  class BigLegPluginPrivate
  {
    /// \brief Visual whose color will be changed.
    public: rendering::VisualPtr visual;

    /// \brief Connects to rendering update event.
    public: event::ConnectionPtr updateConnection;

    /// \brief First color.
    public: common::Color colorA;

    /// \brief Second color.
    public: common::Color colorB;

    /// \brief Time taken by a full cycle.
    public: common::Time period;

    /// \brief Time the current cycle started.
    public: common::Time cycleStartTime;
  };
}

using namespace gazebo;

GZ_REGISTER_VISUAL_PLUGIN(BigLegPlugin)

/////////////////////////////////////////////////
BigLegPlugin::BigLegPlugin() : dataPtr(new BigLegPluginPrivate)
{
}

/////////////////////////////////////////////////
BigLegPlugin::~BigLegPlugin()
{
}

/////////////////////////////////////////////////
void BigLegPlugin::Load(rendering::VisualPtr _visual, sdf::ElementPtr _sdf)
{
  if (!_visual || !_sdf)
  {
    gzerr << "No visual or SDF element specified. Plugin won't load." <<
        std::endl;
    return;
  }
  this->dataPtr->visual = _visual;

  if (!_sdf->HasElement("sdf"))
  {
    gzerr << "An <sdf> tag can't be found within the plugin." << std::endl;
    return;
  }
  auto sdfElem = _sdf->GetElement("sdf");

  // Get color A
  this->dataPtr->colorA.Set(1, 0, 0, 1);
  if (sdfElem->HasElement("color_a"))
    this->dataPtr->colorA = sdfElem->Get<common::Color>("color_a");

  // Get color A
  this->dataPtr->colorB.Set(0, 0, 0, 1);
  if (sdfElem->HasElement("color_b"))
    this->dataPtr->colorB = sdfElem->Get<common::Color>("color_b");

  // Get the period
  this->dataPtr->period.Set(1);
  if (sdfElem->HasElement("period"))
    this->dataPtr->period = sdfElem->Get<double>("period");

  if (this->dataPtr->period <= 0)
  {
    gzerr << "Period can't be lower than zero." << std::endl;
    return;
  }

  // Connect to the world update signal
  this->dataPtr->updateConnection = event::Events::ConnectPreRender(
      std::bind(&BigLegPlugin::Update, this));
}

/////////////////////////////////////////////////
void BigLegPlugin::Update()
{
  if (!this->dataPtr->visual)
  {
    gzerr << "The visual is null." << std::endl;
    return;
  }

  if (this->dataPtr->cycleStartTime == common::Time::Zero)
    this->dataPtr->cycleStartTime = common::Time::GetWallTime();

  auto currentTime = common::Time::GetWallTime();
  auto elapsed = currentTime - this->dataPtr->cycleStartTime;

  // Restart cycle
  if (elapsed >= this->dataPtr->period)
    this->dataPtr->cycleStartTime = currentTime;

  common::Color from;
  common::Color to;
  // Color A -> B
  if (elapsed < this->dataPtr->period*0.5)
  {
    from = this->dataPtr->colorA;
    to = this->dataPtr->colorB;
  }
  // Color B -> A
  else if (elapsed >= this->dataPtr->period*0.5)
  {
    from = this->dataPtr->colorB;
    to = this->dataPtr->colorA;
    elapsed -= this->dataPtr->period*0.5;
  }

  // interpolate each color component
  double pos = (elapsed/(this->dataPtr->period*0.5)).Double();

  double red = from.r + (to.r - from.r) * pos;
  double green = from.g + (to.g - from.g) * pos;
  double blue = from.b + (to.b - from.b) * pos;
  double alpha = from.a + (to.a - from.a) * pos;

  common::Color color(red, green, blue, alpha);

  this->dataPtr->visual->SetDiffuse(color);
  this->dataPtr->visual->SetAmbient(color);
  this->dataPtr->visual->SetTransparency(1-color.a);
}

